{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","emotions","this","props","className","Object","keys","map","value","index","React","Component","App","state","isText","sentimentOutput","sentiment","renderOutput","input_mode","setState","sendForSentimentAnalysis","mode","url","document","getElementById","fetch","then","response","json","data","label","output","results","color","style","fontSize","sendForEmotionAnalysis","rows","onClick","cols","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8QAGMA,E,4JACJ,WAEE,IAAQC,EAAaC,KAAKC,MAAlBF,SACR,OACE,8BACE,uBAAOG,UAAU,uBAAjB,SACE,gCAEIC,OAAOC,KAAKL,GAAUM,KAAI,SAACC,EAAOC,GAAR,OAAkB,+BAAgB,6BAAKD,IAAW,6BAAKP,EAASO,OAArCC,gB,GATxCC,IAAMC,WAkBlBX,IChBTY,E,4MACJC,MAAQ,CACNC,QAAQ,EACRC,gBAAiB,GACjBC,WAAW,G,EAGbC,aAAe,SAACC,GACd,IAAIJ,GAAS,EACM,SAAfI,IACFJ,GAAS,GAEX,EAAKK,SAAS,CAAEL,Y,EAGlBM,yBAA2B,WACzB,EAAKD,SAAS,CAAEH,WAAW,IAC3B,IAAMK,EAAO,EAAKR,MAAMC,OAAS,OAAS,MACpCQ,EAAG,YAAQD,EAAR,sBAA0BA,EAA1B,YAAkCE,SAASC,eAAe,aAAahB,OAEhFiB,MAAMH,GAAKI,MAAK,SAACC,GACfA,EAASC,OAAOF,MAAK,SAACG,GACpB,EAAKV,SAAS,CAAEJ,gBAAiBc,EAAKC,QACtC,IAAIC,EAASF,EAAKG,QAAQF,MACtBG,EAAQ,SACZ,OAAQF,GACN,IAAK,WAAYE,EAAQ,QAAS,MAClC,IAAK,WAAYA,EAAQ,MAG3BF,EAAS,qBAAKG,MAAO,CAAED,MAAOA,EAAOE,SAAU,IAAtC,SAA6CJ,IACtD,EAAKZ,SAAS,CAAEJ,gBAAiBgB,W,EAKvCK,uBAAyB,WAEvB,EAAKjB,SAAS,CAAEH,WAAW,IAC3B,IAAMK,EAAO,EAAKR,MAAMC,OAAS,OAAS,MACpCQ,EAAG,YAAQD,EAAR,oBAAwBA,EAAxB,YAAgCE,SAASC,eAAe,aAAahB,OAE9EiB,MAAMH,GAAKI,MAAK,SAACC,GACfA,EAASC,OAAOF,MAAK,SAACG,GACpB,EAAKV,SAAS,CAAEJ,gBAAiB,cAAC,EAAD,CAAcd,SAAU4B,EAAKG,mB,4CAMpE,WAAU,IAAD,OAEDK,EADanC,KAAKW,MAAhBC,OACc,EAAI,EAC1B,OACE,sBAAKV,UAAU,MAAf,UACE,wBAAQA,UAAU,eAAekC,QAAS,WAAQ,EAAKrB,aAAa,SAApE,kBACA,wBAAQb,UAAU,eAAekC,QAAS,WAAQ,EAAKrB,aAAa,QAApE,iBACA,uBAAM,uBACN,0BAAUoB,KAAMA,EAAME,KAAK,KAAKC,GAAG,cACnC,uBACA,wBAAQpC,UAAU,cAAckC,QAASpC,KAAKkB,yBAA9C,+BACA,wBAAQhB,UAAU,cAAckC,QAASpC,KAAKkC,uBAA9C,6BACA,uBACClC,KAAKW,MAAME,uB,GA/DFL,IAAMC,WAqETC,IC9DA6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAASC,eAAe,SAM1BiB,K","file":"static/js/main.c59778a1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bootstrap.min.css';\r\n\r\nclass EmotionTable extends React.Component {\r\n  render() {\r\n    //Returns the emotions as an HTML table\r\n    const { emotions } = this.props\r\n    return (\r\n      <div>\r\n        <table className=\"table table-bordered\">\r\n          <tbody>\r\n            {\r\n              Object.keys(emotions).map((value, index) => <tr key={index}><td>{value}</td><td>{emotions[value]}</td></tr>)\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\nexport default EmotionTable;","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport EmotionTable from './EmotionTable.js';\r\nimport React from 'react';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    isText: true,\r\n    sentimentOutput: [],\r\n    sentiment: true\r\n  }\r\n\r\n  renderOutput = (input_mode) => {\r\n    let isText = false\r\n    if (input_mode === \"text\") {\r\n      isText = true\r\n    }\r\n    this.setState({ isText })\r\n  }\r\n\r\n  sendForSentimentAnalysis = () => {\r\n    this.setState({ sentiment: true });\r\n    const mode = this.state.isText ? \"text\" : \"url\"\r\n    const url = `./${mode}/sentiment?${mode}=${document.getElementById(\"textinput\").value}`\r\n\r\n    fetch(url).then((response) => {\r\n      response.json().then((data) => {\r\n        this.setState({ sentimentOutput: data.label });\r\n        let output = data.results.label;\r\n        let color = \"yellow\"\r\n        switch (output) {\r\n          case \"positive\": color = \"green\"; break;\r\n          case \"negative\": color = \"red\"; break;\r\n          default: break;\r\n        }\r\n        output = <div style={{ color: color, fontSize: 20 }}>{output}</div>\r\n        this.setState({ sentimentOutput: output });\r\n      })\r\n    });\r\n  }\r\n\r\n  sendForEmotionAnalysis = () => {\r\n\r\n    this.setState({ sentiment: false });\r\n    const mode = this.state.isText ? \"text\" : \"url\"\r\n    const url = `./${mode}/emotion?${mode}=${document.getElementById(\"textinput\").value}`\r\n\r\n    fetch(url).then((response) => {\r\n      response.json().then((data) => {\r\n        this.setState({ sentimentOutput: <EmotionTable emotions={data.results} /> });\r\n      })\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const { isText } = this.state\r\n    const rows = isText ? 4 : 1\r\n    return (\r\n      <div className=\"App\">\r\n        <button className=\"btn btn-info\" onClick={() => { this.renderOutput('text') }}>Text</button>\r\n        <button className=\"btn btn-dark\" onClick={() => { this.renderOutput('url') }}>URL</button>\r\n        <br /><br />\r\n        <textarea rows={rows} cols=\"50\" id=\"textinput\" />\r\n        <br />\r\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\r\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\r\n        <br />\r\n        {this.state.sentimentOutput}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}